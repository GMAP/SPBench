#!/usr/bin/python

## 
 ##############################################################################
 #  File  : spbench.py
 #
 #  Title : SPBench command-line interface
 #
 #  Author: Adriano Marques Garcia <adriano1mg@gmail.com> 
 #
 #  Date  : July 06, 2021
 #
 #  Copyright (C) 2021 Adriano M. Garcia
 # 
 #  This program is free software: you can redistribute it and/or modify
 #  it under the terms of the GNU General Public License as published by
 #  the Free Software Foundation, either version 3 of the License, or
 #  (at your option) any later version.
 #
 #  This program is distributed in the hope that it will be useful,
 #  but WITHOUT ANY WARRANTY; without even the implied warranty of
 #  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 #  GNU General Public License for more details.
 #
 #  You should have received a copy of the GNU General Public License
 #  along with this program. If not, see <https://www.gnu.org/licenses/>.
 # 
 ##############################################################################
##

import argparse

from src.spb_options import *

stream_path = os.path.dirname(os.path.realpath(__file__))#os.path.dirname(sys.argv[0])

def new(args):
    new_func(stream_path, args)
def delete_reg(args):
    delete_reg_func(stream_path, args)
def list_reg(args):
    list_reg_func(stream_path)
def edit_json(args):
    edit_json_func(stream_path, args)
def edit_source(args):
    edit_source_func(stream_path, args)
def execute(args):
    execute_func(stream_path, args)
def compile(args):
    compile_func(stream_path, args)
def register(args):
    register_func(stream_path)
def register_inputs(args):
    new_input_func(stream_path, args)
def list_reg_inputs(args):
    list_inputs_func(stream_path, args)
def install(args):
    install_func(stream_path, args)

parser = argparse.ArgumentParser()
subparsers = parser.add_subparsers()


#subparser for 'install' option
parser_inst = subparsers.add_parser('install')
parser_inst.add_argument('-app',
    action='store',
    type=str,
    dest='app_id',
    required=False,
    default='all',
    choices=['bzip2', 'lane_detection', 'ferret', 'all'],
    help='You can choose a specific application to install or you can use \'all\' to compile all versions.')
parser_inst.set_defaults(func=install)

#subparser for 'new' option
parser_reg = subparsers.add_parser('new')
parser_reg.add_argument('-version', 
    action='store',
    type=str,
    dest='version_id',
    required=True,
    help='Set a name for your new version')# (it must be the same name of the directory you created)')

parser_reg.add_argument('-app',
    action='store',
    type=str,
    dest='app_id',
    required=True,
    choices=['bzip2', 'lane_detection', 'ferret'],
    help='You must choose one from the following applications: [bzip2] [lane_detection] [ferret] (mandatory)')

parser_reg.add_argument('-ppi',
    action='store',
    type=str,
    dest='ppi_id',
    required=True,
    help="You must insert a name for the PPI you will use \n(e.g., fastflow, spar, tbb, etc...). You can choose \'sequential\', as well. (Mandatory)")

parser_reg.add_argument('-from',
    action='store',
    type=str,
    dest='copy_from',
    required=False,
    default='',
    help="Use this option create your new version as a copy of an existent version. Insert the name of the version you want to copy from (Optional. Default: sequential)")
parser_reg.set_defaults(func=new)

#subparser for 'edit' option
parser_edit = subparsers.add_parser('edit')
parser_edit.add_argument('-version',
    action='store',
    type=str,
    dest='version_id',
    required=True,
    help='Enter the name of an application version to edit (mandatory)')

parser_edit.add_argument('-editor',
    action='store',
    type=str,
    dest='user_editor',
    required=False,
    default='nano',
    help='Enter the name of an text editor available in your machine, e.g. "vim", "nano", etc. (default: nano)')

parser_edit.set_defaults(func=edit_source)

#subparser for 'configure' option
parser_config = subparsers.add_parser('configure')
parser_config.add_argument('-version',
    action='store',
    type=str,
    dest='version_id',
    required=True,
    help='Enter the name of an application version to configure (mandatory)')

parser_config.add_argument('-editor',
    action='store',
    type=str,
    dest='user_editor',
    required=False,
    default='nano',
    help='Enter the name of an text editor available in your machine, e.g. "vim", "nano", etc. (default: nano)')

parser_config.set_defaults(func=edit_json)

#subpraser for 'register' option
parser_reg = subparsers.add_parser('register')

#parser_reg.add_argument('-all',
#     action='store_true',
#     dest='reg_all',
#     required=False,
#     help='Register all applications and updates the new current path.')

# parser_reg.add_argument('-lib',
#     action='store',
#     type=str,
#     dest='lib_id',
#     #required=True,
#     default='sequential',
#     #choices=['sequential', 'spar'],
#     help='You must insert the library name (same name as the directory, e.g., fastflow, spar, tbb, ...)')#one from the following options: [sequential] [spar] (mandatory)')
parser_reg.set_defaults(func=register)

#subparser for 'compile' option
parser_cmp = subparsers.add_parser('compile')
parser_cmp.add_argument('-version',
    action='store',
    type=str,
    dest='version_id',
    required=True,
    help='Insert the name of the version to compile (mandatory). You can use \'all\' to compile all versions.')
parser_cmp.set_defaults(func=compile)

#subparser for 'exec' option
parser_exe = subparsers.add_parser('exec')
parser_exe.add_argument('-version',
    action='store',
    type=str,
    dest='version_id',
    required=True,
    help='Name of the version to execute (mandatory). You can use \'all\' to execute all versions.')

parser_exe.add_argument('-input',
    action='store',
    type=str,
    dest='input_file',
    required=True,
    help='Input file (mandatory)')

parser_exe.add_argument('-nthreads', 
    action='store',
    type=str,
    dest='nthreads',
    required=False,
    default='1',
    help='Number of threads. It can be used inside the parallel versions. Default value: 1. (Optional)')

parser_exe.add_argument('-batch', 
    action='store',
    type=str,
    dest='batch_size',
    required=False,
    default='1',
    help='Batch size. It can be used to set a batch size. Default value: 1. (Optional)')
    
parser_exe.add_argument('-monitor', 
    action='store',
    type=str,
    dest='time_interval',
    required=False,
    default='',
    help='Monitor latency, throughput, CPU and memory usage. You must indicate the monitoring time interval in milliseconds (e.g. 250. Optional).')

parser_exe.add_argument('-frequency', 
    action='store',
    type=str,
    dest='items_reading_frequency',
    required=False,
    default='',
    help='Items will be read in a constant frequency. You must indicate a time interval in MICROseconds, e.g. 1000 (= 1 millisecond). The minimum frequency you can set is 0 microsecond, however the actual minimum limit will be defined by your system\'s memory access speed (the command [-frequency 0] is equivalent to [-in_memory]). (Optional).')

parser_exe.add_argument('-in_memory', 
    action='append_const',
    const="-k",
    dest='exec_arguments',
    required=False,
    help='Run the application in-memory (Optional)')

parser_exe.add_argument('-latency', 
    action='append_const',
    const="-l",
    dest='exec_arguments',
    required=False,
    help='Print average latency and throughput results (Optional)')

parser_exe.add_argument('-throughput', 
    action='append_const',
    const="-x",
    dest='exec_arguments',
    required=False,
    help='Print average throughput results (Optional)')

# parser_exe.add_argument('-f',
#     action='store',
#     type=argparse.FileType('w'),
#     dest='latency_file',
#     required=False,
#     help='Insert a file name to store latency results (Optional)')

parser_exe.add_argument('-latency_monitor', 
    action='append_const',
    const="-f",
    dest='exec_arguments',
    required=False,
    help='Monitors latency per stage and per item and generates a log file (Optional)')

parser_exe.add_argument('-resource_usage', 
    action='append_const',
    const='-u',
    dest='exec_arguments',
    required=False,
    help='Print the global memory and CPU usage for this application (Optional)')

parser_exe.add_argument('-d', 
    action='append_const',
    const='-d',
    dest='exec_arguments',
    required=False,
    help='Decompress file (Use only for Bzip2. Optional)')
parser_exe.set_defaults(func=execute)

parser_list = subparsers.add_parser('list')
parser_list.set_defaults(func=list_reg)

parser_del = subparsers.add_parser('delete')
parser_del.add_argument('-version', 
     action='store',
     type=str,
     dest='version_id',
     required=False,
     help='Insert the name of the programm to delete')

parser_del.add_argument('-all', 
     action='store_true',
     default=False,
     dest='delete_all',
     required=False,
     help='Delete all registered itens')
parser_del.set_defaults(func=delete_reg)

# register input
parser_reg_inputs = subparsers.add_parser('new_input')
parser_reg_inputs.add_argument('-input_id', 
    action='store',
    type=str,
    dest='input_id',
    required=True,
    help='Set a name for your new input (existent entries will be replaced)')

parser_reg_inputs.add_argument('-app',
    action='store',
    type=str,
    dest='app_id',
    required=True,
    choices=['bzip2', 'lane_detection', 'ferret'],
    help="You must choose one from the following applications:\n[bzip2] [lane_detection] [ferret] (mandatory)")

parser_reg_inputs.add_argument('-input',
    action='store',
    type=str,
    dest='input',
    required=True,
    #default='sequential',
    help="You must insert the input string \n(e.g., \"/home/user/my_input_file\")")
parser_reg_inputs.set_defaults(func=register_inputs)

# list registered inputs
parser_list_inputs = subparsers.add_parser('list_inputs')
parser_list_inputs.add_argument('-app',
    action='store',
    type=str,
    dest='app_id',
    required=False,
    choices=['bzip2', 'lane_detection', 'ferret'],
    help="You must choose one from the following applications:\n[bzip2] [lane_detection] [ferret] (mandatory)")
parser_list_inputs.set_defaults(func=list_reg_inputs)

args = parser.parse_args()
args.func(args)

sys.exit()

